<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2><span id="quick-start">Quick Start</span><a href="#quick-start" class="header-anchor">#</a></h2><h3><span id="create-a-new-post">Create a new post</span><a href="#create-a-new-post" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3><span id="run-server">Run server</span><a href="#run-server" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3><span id="generate-static-files">Generate static files</span><a href="#generate-static-files" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3><span id="deploy-to-remote-sites">Deploy to remote sites</span><a href="#deploy-to-remote-sites" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>clickhouse分区表调研</title>
    <url>/2022/06/28/clickhouse%E5%88%86%E5%8C%BA%E8%A1%A8%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<h1><span id="clickhouse-fen-qu-biao-diao-yan">clickhouse分区表调研</span><a href="#clickhouse-fen-qu-biao-diao-yan" class="header-anchor">#</a></h1><div class="toc">

<!-- toc -->

<ul>
<li><a href="#1-da-jian-ben-di-huan-jing">1.搭建本地环境</a><ul>
<li><a href="#1-1-sou-suo-jing-xiang-shi-fou-cun-zai">1.1.搜索镜像是否存在</a></li>
<li><a href="#1-2-xia-zai-jing-xiang">1.2.下载镜像</a></li>
<li><a href="#1-3-yun-xing-rong-qi">1.3.运行容器</a></li>
<li><a href="#1-4-xiu-gai-mi-ma">1.4.修改密码</a><ul>
<li><a href="#1-4-1-jin-ru-rong-qi">1.4.1.进入容器</a></li>
<li><a href="#1-4-2-sheng-cheng-zi-ding-yi-mi-ma-mi-wen">1.4.2.生成自定义密码密文</a></li>
<li><a href="#1-4-3-chong-qi-clickhouse-server">1.4.3.重启clickhouse-server</a></li>
</ul>
</li>
<li><a href="#1-5-lian-jie-clickhouse">1.5.连接clickhouse</a></li>
<li><a href="#1-6-ce-shi-ben-di-huan-jing">1.6.测试本地环境</a></li>
</ul>
</li>
<li><a href="#2-fen-qu-biao">2.分区表</a><ul>
<li><a href="#2-1-gai-nian">2.1.概念</a></li>
<li><a href="#2-2-zuo-yong">2.2.作用</a></li>
<li><a href="#2-3-fen-qu-jian-de-biao-xian-xing-shi">2.3.分区键的表现形式</a></li>
<li><a href="#2-4-fen-qu-jian-de-shi-yong-zhu-yi-shi-xiang">2.4.分区键的使用注意事项</a><ul>
<li><a href="#2-4-1-ru-he-cha-xun-yi-zhang-biao-de-fen-qu-qing-kuang">2.4.1.如何查询一张表的分区情况</a></li>
<li><a href="#2-4-2-shu-ju-xie-ru-yu-fen-qu-he-bing">2.4.2.数据写入与分区合并</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#3-fen-bu-shi-biao">3.分布式表</a><ul>
<li><a href="#3-1-gai-nian">3.1.概念</a></li>
<li><a href="#3-2-zuo-yong">3.2.作用</a></li>
<li><a href="#3-3-shi-xian-yuan-li">3.3.实现原理</a><ul>
<li><a href="#3-3-1-xie-ru-shu-ju">3.3.1 写入数据</a></li>
<li><a href="#3-3-2-du-qu-shu-ju">3.3.2 读取数据</a></li>
</ul>
</li>
<li><a href="#3-4-yu-ju">3.4.语句</a></li>
</ul>
</li>
<li><a href="#4-can-kao-zi-liao">4.参考资料</a></li>
</ul>
<!-- tocstop -->

</div>


<h2><span id="1-da-jian-ben-di-huan-jing">1.搭建本地环境</span><a href="#1-da-jian-ben-di-huan-jing" class="header-anchor">#</a></h2><p>本次clickhouse的环境搭建在docker中进行</p>
<p>windows或者mac系统均需要先安装好docker</p>
<h3><span id="1-1-sou-suo-jing-xiang-shi-fou-cun-zai">1.1.搜索镜像是否存在</span><a href="#1-1-sou-suo-jing-xiang-shi-fou-cun-zai" class="header-anchor">#</a></h3><p><em>window系统打开cmd，mac系统在命令行里直接敲入</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search clickhouse</span><br></pre></td></tr></table></figure>

<p><strong>搜索结果</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\Pengyu.Ren&gt;docker search clickhouse</span><br><span class="line">NAME                                  DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">yandex/clickhouse-server              ClickHouse is an open-source column-oriented…   365                  [OK]</span><br><span class="line">clickhouse/clickhouse-server          ClickHouse is an open-source column-oriented…   57</span><br><span class="line">clickhouse/kerberos-kdc                                                               1</span><br><span class="line">antrea/clickhouse-server                                                              1</span><br><span class="line">antrea/clickhouse-operator                                                            0</span><br><span class="line">clickhouse/integration-helper                                                         0</span><br><span class="line">clickhouse/python-bottle                                                              0</span><br><span class="line">clickhouse/dotnet-client              ClickHouse.NET client for ClickHouse integra…   0</span><br><span class="line">clickhouse/s3-proxy                                                                   0</span><br><span class="line">clickhouse/stateless-test                                                             0</span><br><span class="line">clickhouse/stateful-test                                                              0</span><br><span class="line">clickhouse/unit-test                                                                  0</span><br><span class="line">clickhouse/postgresql-java-client                                                     0</span><br><span class="line">clickhouse/binary-builder                                                             0</span><br><span class="line">clickhouse/integration-test                                                           0</span><br><span class="line">clickhouse/mysql-java-client                                                          0</span><br><span class="line">clickhouse/mysql-php-client                                                           0</span><br><span class="line">clickhouse/deb-builder                                                                0</span><br><span class="line">clickhouse/mysql-golang-client                                                        0</span><br><span class="line">clickhouse/mysql-js-client                                                            0</span><br><span class="line">clickhouse/stress-test                                                                0</span><br><span class="line">clickhouse/integration-tests-runner                                                   0</span><br><span class="line">clickhouse/fuzzer                                                                     0</span><br><span class="line">clickhouse/performance-comparison                                                     0</span><br><span class="line">clickhouse/kerberized-hadoop                                                          0</span><br><span class="line"></span><br><span class="line">C:\Users\Pengyu.Ren&gt;</span><br></pre></td></tr></table></figure>

<h3><span id="1-2-xia-zai-jing-xiang">1.2.下载镜像</span><a href="#1-2-xia-zai-jing-xiang" class="header-anchor">#</a></h3><p><em>window系统打开cmd，mac系统在命令行里直接敲入</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull yandex/clickhouse-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果需要下载指定版本的clickhouse镜像，可在后面加上版本号，如：</span></span><br><span class="line">docker pull yandex/clickhouse-server:21.3.20</span><br></pre></td></tr></table></figure>

<h3><span id="1-3-yun-xing-rong-qi">1.3.运行容器</span><a href="#1-3-yun-xing-rong-qi" class="header-anchor">#</a></h3><p><em>window系统打开cmd，mac系统在命令行里直接敲入</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name clickhouse-server --ulimit nofile=262144:262144 -p 8123:8123 -p 9000:9000 -p 9009:9009 yandex/clickhouse-server</span><br></pre></td></tr></table></figure>

<p>启动成功后，在docker desktop中可以看到新启动的clickhouse-server</p>
<p><img src="https://s3.bmp.ovh/imgs/2022/06/08/9a72046d38ff737d.png"></p>
<h3><span id="1-4-xiu-gai-mi-ma">1.4.修改密码</span><a href="#1-4-xiu-gai-mi-ma" class="header-anchor">#</a></h3><h4><span id="1-4-1-jin-ru-rong-qi">1.4.1.进入容器</span><a href="#1-4-1-jin-ru-rong-qi" class="header-anchor">#</a></h4><p>要修改clickhouse-server的默认密码，需要先进入容器，使用如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it clickhouse-server /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sample</span></span><br><span class="line">C:\Users\Pengyu.Ren&gt;docker exec -it clickhouse-server /bin/bash</span><br><span class="line">root@77720e63254e:/#</span><br></pre></td></tr></table></figure>

<p>进入容器后，进入&#x2F;etc&#x2F;clickhouse-server&#x2F;users.xml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/clickhouse-server/users.xml</span><br></pre></td></tr></table></figure>

<p><strong>如果提示容器内没有编辑器vim，则需要我们手动安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先后执行如下两条命令</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install vim -y</span><br><span class="line"></span><br><span class="line">apt-get update，这个命令的作用是：同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引，这样才能获取到最新的软件包</span><br></pre></td></tr></table></figure>

<h4><span id="1-4-2-sheng-cheng-zi-ding-yi-mi-ma-mi-wen">1.4.2.生成自定义密码密文</span><a href="#1-4-2-sheng-cheng-zi-ding-yi-mi-ma-mi-wen" class="header-anchor">#</a></h4><p>指令及执行结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PASSWORD=$(base64 &lt; /dev/urandom | head -c8); echo &quot;123456&quot;; echo -n &quot;123456&quot; | sha256sum | tr -d &#x27;-&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@77720e63254e:/# PASSWORD=$(base64 &lt; /dev/urandom | head -c8); echo &quot;123456&quot;; echo -n &quot;123456&quot; | sha256sum | tr -d &#x27;-&#x27;</span><br><span class="line">123456</span><br><span class="line">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span><br></pre></td></tr></table></figure>

<p>123456是明文</p>
<p>8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92是密文</p>
<p>由于官方不建议直接写明文密码，因此我们在这里讲密码修改为密文密码；</p>
<p>继续刚才打开的vim &#x2F;etc&#x2F;clickhouse-server&#x2F;users.xml</p>
<p>默认新安装的，里面有一条<password>,这个标签是设置明文密码的，<strong>我们将这个标签改为<password_sha256_hex></password_sha256_hex></strong></password></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 明文123456加密后的密文如下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password_sha256_hex</span>&gt;</span>8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="tag">&lt;/<span class="name">password_sha256_hex</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4><span id="1-4-3-chong-qi-clickhouse-server">1.4.3.重启clickhouse-server</span><a href="#1-4-3-chong-qi-clickhouse-server" class="header-anchor">#</a></h4><p>mac系统可使用如下指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart clickhouse-server</span><br></pre></td></tr></table></figure>

<p>如使用docker desktop可点击容器后面的restart按钮进行重启即可</p>
<h3><span id="1-5-lian-jie-clickhouse">1.5.连接clickhouse</span><a href="#1-5-lian-jie-clickhouse" class="header-anchor">#</a></h3><p>本次连接使用了DBeaver工具</p>
<p>在DBeaver中新建连接，类型选择clickhouse</p>
<p><img src="https://s3.bmp.ovh/imgs/2022/06/08/a28a748b11c2d742.png"></p>
<p>点击“下一步”，在地址栏中填入localhost，如果docker假设在本地的话；</p>
<p>用户名default</p>
<p>密码就是刚刚设置的密文密码对应的明文，我这里设置的是123456；</p>
<p>检查驱动可以自动下载所需的驱动，需要之前配好过maven仓库和环境变量；</p>
<p><img src="https://s3.bmp.ovh/imgs/2022/06/08/99846864b83458d6.png"></p>
<p>填写完成，并且下载好驱动之后，点击“测试连接”，测试成功会弹出连接成功和clickhouse-server的版本信息</p>
<p><img src="https://s3.bmp.ovh/imgs/2022/06/08/fad34bf958cc889f.png"></p>
<p>最后点击“完成”，客户端连接的配置工作就完成了。</p>
<h3><span id="1-6-ce-shi-ben-di-huan-jing">1.6.测试本地环境</span><a href="#1-6-ce-shi-ben-di-huan-jing" class="header-anchor">#</a></h3><p>新建sql窗口，执行如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> version();</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.bmp.ovh/imgs/2022/06/08/4294966bcfc3ca73.png"></p>
<p>得到版本信息，说明测试通过。</p>
<h2><span id="2-fen-qu-biao">2.分区表</span><a href="#2-fen-qu-biao" class="header-anchor">#</a></h2><h3><span id="2-1-gai-nian">2.1.概念</span><a href="#2-1-gai-nian" class="header-anchor">#</a></h3><p>分区是<strong>逻辑分区</strong>的概念。</p>
<blockquote>
<p>分区是在一个表中通过指定的规则划分而成的逻辑数据集。可以按任意标准进行分区，如按月，按日或按事件类型。为了减少需要操作的数据，每个分区都是分开存储的。访问数据时，ClickHouse 尽量使用这些分区的最小子集。</p>
<p>分区是在 建表 时通过 <strong>PARTITION BY expr</strong> 子句指定的。</p>
</blockquote>
<h3><span id="2-2-zuo-yong">2.2.作用</span><a href="#2-2-zuo-yong" class="header-anchor">#</a></h3><blockquote>
<p>是降低扫描的范围，优化查询速度；</p>
</blockquote>
<h3><span id="2-3-fen-qu-jian-de-biao-xian-xing-shi">2.3.分区键的表现形式</span><a href="#2-3-fen-qu-jian-de-biao-xian-xing-shi" class="header-anchor">#</a></h3><ol>
<li><p>分区键可以是表中列的任意表达式。sample：指定按月分区，表达式为 toYYYYMM(date_column)：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> visits</span><br><span class="line">(</span><br><span class="line">    VisitDate <span class="type">Date</span>,</span><br><span class="line">    <span class="keyword">Hour</span> UInt8,</span><br><span class="line">    ClientID UUID</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> MergeTree()</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMM(VisitDate)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">Hour</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分区键也可以是表达式元组（类似 主键 ）。sample：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ENGINE <span class="operator">=</span> ReplicatedCollapsingMergeTree(<span class="string">&#x27;/clickhouse/tables/name&#x27;</span>, <span class="string">&#x27;replica1&#x27;</span>, Sign)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> (toMonday(StartDate), EventType)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (CounterID, StartDate, intHash32(UserID));</span><br></pre></td></tr></table></figure></li>
</ol>
<h3><span id="2-4-fen-qu-jian-de-shi-yong-zhu-yi-shi-xiang">2.4.分区键的使用注意事项</span><a href="#2-4-fen-qu-jian-de-shi-yong-zhu-yi-shi-xiang" class="header-anchor">#</a></h3><p>官方文档建议，不要用太精细的分区方案（超过一千个分区）。否则，会因为文件系统中的文件数量过多和需要打开的文件描述符过多，导致 SELECT 查询效率不佳。</p>
<h4><span id="2-4-1-ru-he-cha-xun-yi-zhang-biao-de-fen-qu-qing-kuang">2.4.1.如何查询一张表的分区情况</span><a href="#2-4-1-ru-he-cha-xun-yi-zhang-biao-de-fen-qu-qing-kuang" class="header-anchor">#</a></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">partition</span>,</span><br><span class="line">    name,</span><br><span class="line">    active</span><br><span class="line"><span class="keyword">FROM</span> system.parts</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">table</span> <span class="operator">=</span> <span class="string">&#x27;visits&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这里我们用一个现存的例子来看，这张表是dev环境中的一张m241的表，表字段较多，因此做了省略，只保留了几个关键字段；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dwd_tsp_m241_newenergy_hi</span><br><span class="line">(</span><br><span class="line">    `dt` String COMMENT <span class="string">&#x27;odps表分区字段&#x27;</span>,</span><br><span class="line">    `<span class="type">time</span>` String COMMENT <span class="string">&#x27;毫秒时间戳&#x27;</span>,</span><br><span class="line">    `second_time` String COMMENT <span class="string">&#x27;秒时间戳&#x27;</span>,</span><br><span class="line">    `date_time_str` DateTime COMMENT <span class="string">&#x27;基于time算出的yyyy-mm-dd hh:mm:ss&#x27;</span>,</span><br><span class="line">    `date_hour` String COMMENT <span class="string">&#x27;基于time算出的分区：yyyymmddhh&#x27;</span>,</span><br><span class="line">    `vin` String,</span><br><span class="line">    `configid` String,</span><br><span class="line">    `sequenceid` String</span><br><span class="line">)</span><br><span class="line">ENGINE <span class="operator">=</span> MergeTree()</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> toYYYYMMDD(date_time_str)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (date_time_str,vin);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 初始化数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> vdp.dwd_tsp_m241_newenergy_hi (dt,`<span class="type">time</span>`,second_time,date_time_str,date_hour,vin,configid,sequenceid) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;12345678&#x27;</span>,<span class="string">&#x27;1654672961748&#x27;</span>,<span class="string">&#x27;1654672962&#x27;</span>,<span class="string">&#x27;2022-06-08 15:23:00&#x27;</span>,<span class="string">&#x27;2022060815&#x27;</span>,<span class="string">&#x27;L6T79P2N5MP009118&#x27;</span>,<span class="string">&#x27;newenergy&#x27;</span>,<span class="string">&#x27;178&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> vdp.dwd_tsp_m241_newenergy_hi (dt,`<span class="type">time</span>`,second_time,date_time_str,date_hour,vin,configid,sequenceid) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;12345678&#x27;</span>,<span class="string">&#x27;1654672961748&#x27;</span>,<span class="string">&#x27;1654672962&#x27;</span>,<span class="string">&#x27;2022-06-08 15:23:00&#x27;</span>,<span class="string">&#x27;2022060815&#x27;</span>,<span class="string">&#x27;L6T79P2N5MP009118&#x27;</span>,<span class="string">&#x27;newenergy&#x27;</span>,<span class="string">&#x27;178&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> vdp.dwd_tsp_m241_newenergy_hi (dt,`<span class="type">time</span>`,second_time,date_time_str,date_hour,vin,configid,sequenceid) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;12345678&#x27;</span>,<span class="string">&#x27;1654672961750&#x27;</span>,<span class="string">&#x27;1654672962&#x27;</span>,<span class="string">&#x27;2022-06-08 15:23:00&#x27;</span>,<span class="string">&#x27;2022060815&#x27;</span>,<span class="string">&#x27;L6T79P2N5MP009119&#x27;</span>,<span class="string">&#x27;newenergy&#x27;</span>,<span class="string">&#x27;178&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> vdp.dwd_tsp_m241_newenergy_hi (dt,`<span class="type">time</span>`,second_time,date_time_str,date_hour,vin,configid,sequenceid) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;12345678&#x27;</span>,<span class="string">&#x27;1654672961750&#x27;</span>,<span class="string">&#x27;1654672962&#x27;</span>,<span class="string">&#x27;2022-06-08 15:23:00&#x27;</span>,<span class="string">&#x27;2022060815&#x27;</span>,<span class="string">&#x27;L6T79P2N5MP009119&#x27;</span>,<span class="string">&#x27;newenergy&#x27;</span>,<span class="string">&#x27;178&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> vdp.dwd_tsp_m241_newenergy_hi (dt,`<span class="type">time</span>`,second_time,date_time_str,date_hour,vin,configid,sequenceid) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;12345678&#x27;</span>,<span class="string">&#x27;1654672961750&#x27;</span>,<span class="string">&#x27;1654672962&#x27;</span>,<span class="string">&#x27;2022-06-09 15:23:00&#x27;</span>,<span class="string">&#x27;2022060815&#x27;</span>,<span class="string">&#x27;L6T79P2N5MP009119&#x27;</span>,<span class="string">&#x27;newenergy&#x27;</span>,<span class="string">&#x27;178&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> vdp.dwd_tsp_m241_newenergy_hi (dt,`<span class="type">time</span>`,second_time,date_time_str,date_hour,vin,configid,sequenceid) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;12345678&#x27;</span>,<span class="string">&#x27;1654672961750&#x27;</span>,<span class="string">&#x27;1654672962&#x27;</span>,<span class="string">&#x27;2022-06-09 15:23:00&#x27;</span>,<span class="string">&#x27;2022060815&#x27;</span>,<span class="string">&#x27;L6T79P2N5MP009119&#x27;</span>,<span class="string">&#x27;newenergy&#x27;</span>,<span class="string">&#x27;178&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询分片情况</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">partition</span>, name, active <span class="keyword">FROM</span> system.parts <span class="keyword">WHERE</span> <span class="keyword">table</span> <span class="operator">=</span> <span class="string">&#x27;dwd_tsp_m241_newenergy_hi&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>可以查询得到如下的分片结果：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">partition</span><span class="operator">|</span>name          <span class="operator">|</span>active<span class="operator">|</span></span><br><span class="line"><span class="comment">---------|--------------|------|</span></span><br><span class="line"><span class="number">20220608</span> <span class="operator">|</span><span class="number">20220608</span>_1_1_0<span class="operator">|</span>     <span class="number">1</span><span class="operator">|</span></span><br><span class="line"><span class="number">20220608</span> <span class="operator">|</span><span class="number">20220608</span>_2_2_0<span class="operator">|</span>     <span class="number">1</span><span class="operator">|</span></span><br><span class="line"><span class="number">20220608</span> <span class="operator">|</span><span class="number">20220608</span>_3_3_0<span class="operator">|</span>     <span class="number">1</span><span class="operator">|</span></span><br><span class="line"><span class="number">20220608</span> <span class="operator">|</span><span class="number">20220608</span>_4_4_0<span class="operator">|</span>     <span class="number">1</span><span class="operator">|</span></span><br><span class="line"><span class="number">20220609</span> <span class="operator">|</span><span class="number">20220609</span>_5_5_0<span class="operator">|</span>     <span class="number">1</span><span class="operator">|</span></span><br><span class="line"><span class="number">20220609</span> <span class="operator">|</span><span class="number">20220609</span>_6_6_0<span class="operator">|</span>     <span class="number">1</span><span class="operator">|</span></span><br></pre></td></tr></table></figure>

<p>因为建表时使用的分片键是PARTITION BY toYYYYMMDD(date_time_str)，精确到年月日，初始化数据中存在20220608和20220609的数据，因此存在2个partition；</p>
<p>20220608_1_1_0这个命名的规则如下：</p>
<ul>
<li>20220608是分区的名称；</li>
<li>第一个1是数据块的最小编号；</li>
<li>第二个1是数据块的最大编号；</li>
<li>第三个0是块级别(即在由块组成的合并树中，该块在树中的深度);</li>
</ul>
<p><strong>active</strong> 列为片段状态。1 代表激活状态；0 代表非激活状态。非激活片段是那些在合并到较大片段之后剩余的源数据片段。损坏的数据片段也表示为非活动状态。</p>
<p>再次执行如下语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> vdp.dwd_tsp_m241_newenergy_hi (dt,`<span class="type">time</span>`,second_time,date_time_str,date_hour,vin,configid,sequenceid) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;12345678&#x27;</span>,<span class="string">&#x27;1654672966666&#x27;</span>,<span class="string">&#x27;1654372962&#x27;</span>,<span class="string">&#x27;2022-06-08 15:23:00&#x27;</span>,<span class="string">&#x27;2022060815&#x27;</span>,<span class="string">&#x27;L6T79P2N5MP009120&#x27;</span>,<span class="string">&#x27;newenergy&#x27;</span>,<span class="string">&#x27;178&#x27;</span>);</span><br><span class="line"></span><br><span class="line">OPTIMIZE <span class="keyword">TABLE</span> dwd_tsp_m241_newenergy_hi <span class="keyword">PARTITION</span> <span class="number">20220608</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">partition</span>, name, active <span class="keyword">FROM</span> system.parts <span class="keyword">WHERE</span> <span class="keyword">table</span> <span class="operator">=</span> <span class="string">&#x27;dwd_tsp_m241_newenergy_hi&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>可以得到新的分片在合并之后的结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">partition</span><span class="operator">|</span>name          <span class="operator">|</span>active<span class="operator">|</span></span><br><span class="line"><span class="comment">---------|--------------|------|</span></span><br><span class="line"><span class="number">20220608</span> <span class="operator">|</span><span class="number">20220608</span>_1_1_0<span class="operator">|</span>     <span class="number">0</span><span class="operator">|</span></span><br><span class="line"><span class="number">20220608</span> <span class="operator">|</span><span class="number">20220608</span>_1_7_1<span class="operator">|</span>     <span class="number">1</span><span class="operator">|</span></span><br><span class="line"><span class="number">20220608</span> <span class="operator">|</span><span class="number">20220608</span>_2_2_0<span class="operator">|</span>     <span class="number">0</span><span class="operator">|</span></span><br><span class="line"><span class="number">20220608</span> <span class="operator">|</span><span class="number">20220608</span>_3_3_0<span class="operator">|</span>     <span class="number">0</span><span class="operator">|</span></span><br><span class="line"><span class="number">20220608</span> <span class="operator">|</span><span class="number">20220608</span>_4_4_0<span class="operator">|</span>     <span class="number">0</span><span class="operator">|</span></span><br><span class="line"><span class="number">20220608</span> <span class="operator">|</span><span class="number">20220608</span>_7_7_0<span class="operator">|</span>     <span class="number">0</span><span class="operator">|</span></span><br><span class="line"><span class="number">20220609</span> <span class="operator">|</span><span class="number">20220609</span>_5_5_0<span class="operator">|</span>     <span class="number">1</span><span class="operator">|</span></span><br><span class="line"><span class="number">20220609</span> <span class="operator">|</span><span class="number">20220609</span>_6_6_0<span class="operator">|</span>     <span class="number">1</span><span class="operator">|</span></span><br></pre></td></tr></table></figure>

<p>这里可以看到，相同计算分片键结果的数据块进行了合并；</p>
<p>还可以通过进入表目录的方式查询分片的结果:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@77720e63254e:/var/lib/clickhouse/data/vdp/dwd_tsp_m241_newenergy_hi# ll</span><br><span class="line">total 48</span><br><span class="line">drwxr-x--- 11 clickhouse clickhouse 4096 Jun  8 07:34 ./</span><br><span class="line">drwxr-x---  3 clickhouse clickhouse 4096 Jun  8 07:07 ../</span><br><span class="line">drwxr-x---  2 clickhouse clickhouse 4096 Jun  8 07:24 20220608_1_1_0/</span><br><span class="line">drwxr-x---  2 clickhouse clickhouse 4096 Jun  8 07:34 20220608_1_7_1/</span><br><span class="line">drwxr-x---  2 clickhouse clickhouse 4096 Jun  8 07:28 20220608_2_2_0/</span><br><span class="line">drwxr-x---  2 clickhouse clickhouse 4096 Jun  8 07:28 20220608_3_3_0/</span><br><span class="line">drwxr-x---  2 clickhouse clickhouse 4096 Jun  8 07:28 20220608_4_4_0/</span><br><span class="line">drwxr-x---  2 clickhouse clickhouse 4096 Jun  8 07:34 20220608_7_7_0/</span><br><span class="line">drwxr-x---  2 clickhouse clickhouse 4096 Jun  8 07:30 20220609_5_5_0/</span><br><span class="line">drwxr-x---  2 clickhouse clickhouse 4096 Jun  8 07:30 20220609_6_6_0/</span><br><span class="line">drwxr-x---  2 clickhouse clickhouse 4096 Jun  8 07:07 detached/</span><br><span class="line">-rw-r-----  1 clickhouse clickhouse    1 Jun  8 07:07 format_version.txt</span><br><span class="line">root@77720e63254e:/var/lib/clickhouse/data/vdp/dwd_tsp_m241_newenergy_hi# pwd</span><br><span class="line">/var/lib/clickhouse/data/vdp/dwd_tsp_m241_newenergy_hi</span><br></pre></td></tr></table></figure>

<h4><span id="2-4-2-shu-ju-xie-ru-yu-fen-qu-he-bing">2.4.2.数据写入与分区合并</span><a href="#2-4-2-shu-ju-xie-ru-yu-fen-qu-he-bing" class="header-anchor">#</a></h4><p>任何一个批次的数据写入都会产生一个<strong>临时分区</strong>，不会纳入任何一个已有的分区；<br>写入后的某个时刻（大概 10-15 分钟后），ClickHouse 会自动执行合并操作（等不及也可以手动通过 optimize 执行），把临时分区的数据，合并到已有分区中；</p>
<p><strong>非激活片段(active为0)<strong>会在合并后的10分钟左右被</strong>删除</strong>。</p>
<p>上文中的例子，过一段时间再次查询分区情况可得：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">partition</span><span class="operator">|</span>name          <span class="operator">|</span>active<span class="operator">|</span></span><br><span class="line"><span class="comment">---------|--------------|------|</span></span><br><span class="line"><span class="number">20220608</span> <span class="operator">|</span><span class="number">20220608</span>_1_7_1<span class="operator">|</span>     <span class="number">1</span><span class="operator">|</span></span><br><span class="line"><span class="number">20220609</span> <span class="operator">|</span><span class="number">20220609</span>_5_5_0<span class="operator">|</span>     <span class="number">1</span><span class="operator">|</span></span><br><span class="line"><span class="number">20220609</span> <span class="operator">|</span><span class="number">20220609</span>_6_6_0<span class="operator">|</span>     <span class="number">1</span><span class="operator">|</span></span><br></pre></td></tr></table></figure>



<h2><span id="3-fen-bu-shi-biao">3.分布式表</span><a href="#3-fen-bu-shi-biao" class="header-anchor">#</a></h2><h3><span id="3-1-gai-nian">3.1.概念</span><a href="#3-1-gai-nian" class="header-anchor">#</a></h3><p>物理分片，数据经过路由，存储到不同的节点上；每个节点上存储部分的数据，分而治之的思想；</p>
<h3><span id="3-2-zuo-yong">3.2.作用</span><a href="#3-2-zuo-yong" class="header-anchor">#</a></h3><p>根本目的是解决单机数据量太大的问题；</p>
<h3><span id="3-3-shi-xian-yuan-li">3.3.实现原理</span><a href="#3-3-shi-xian-yuan-li" class="header-anchor">#</a></h3><p>clickhouse中，是通过水平切分的方式，将完整的数据切分成不同的分片，这些分片只保存一部分数据，分布在不同的节点上，通过Distributed表引擎来将数据拼成一个完整的表来使用的。Distributed表本身不存储数据，但是能作为查询的表来使用。</p>
<p>在这里，将distributed表称为<strong>分布式表</strong>，将实际存储数据的节点上的表叫做<strong>数据表</strong>，每一个片区称为一个<strong>shard</strong>，每个片区的权重叫<strong>weight</strong>，每个片区的节点（副本）叫<strong>replica</strong>，以便于后续的阐述区分。</p>
<p>负载的策略具体通过<strong>users.xml</strong>配置进行实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Profiles of settings. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Default settings. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Maximum memory usage for processing single query, in bytes. --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单次查询的最大内存，默认10000000000，约9.3gb --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">max_memory_usage</span>&gt;</span>10000000000<span class="tag">&lt;/<span class="name">max_memory_usage</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- How to choose between replicas during distributed query processing.</span></span><br><span class="line"><span class="comment">            这里有几种负载均衡的策略</span></span><br><span class="line"><span class="comment">             random - choose random replica from set of replicas with minimum number of errors</span></span><br><span class="line"><span class="comment">            随机策略，但是随机的基础是错误最少的几个节点之中随机</span></span><br><span class="line"><span class="comment">             nearest_hostname - from set of replicas with minimum number of errors, choose replica</span></span><br><span class="line"><span class="comment">              with minimum number of different symbols between replica&#x27;s hostname and local hostname</span></span><br><span class="line"><span class="comment">              (Hamming distance).</span></span><br><span class="line"><span class="comment">            hostname最相近的，但是最小的基础是错误最少的几个节点之中</span></span><br><span class="line"><span class="comment">             in_order - first live replica is chosen in specified order.</span></span><br><span class="line"><span class="comment">            顺序</span></span><br><span class="line"><span class="comment">             first_or_random - if first replica one has higher number of errors, pick a random one from replicas with minimum number of errors.</span></span><br><span class="line"><span class="comment">            基本上可以理解为还是找最低错误次数的节点</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load_balancing</span>&gt;</span>random<span class="tag">&lt;/<span class="name">load_balancing</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Profile that allows only read queries. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">readonly</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">readonly</span>&gt;</span>1<span class="tag">&lt;/<span class="name">readonly</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">readonly</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>集群的配置通过<strong>config.xml</strong>实现</p>
<p>以下是clickhouse-server默认自带的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">remote_servers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Test only shard config for testing distributed storage --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test_shard_localhost</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Inter-server per-cluster secret for Distributed queries</span></span><br><span class="line"><span class="comment">             default: no secret (no authentication will be performed)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             If set, then Distributed queries will be validated on shards, so at least:</span></span><br><span class="line"><span class="comment">             - such cluster should exist on the shard,</span></span><br><span class="line"><span class="comment">             - such cluster should have the same secret.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             And also (and which is more important), the initial_user will</span></span><br><span class="line"><span class="comment">             be used as current user for the query.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             Right now the protocol is pretty simple and it only takes into account:</span></span><br><span class="line"><span class="comment">             - cluster name</span></span><br><span class="line"><span class="comment">             - query</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             Also it will be nice if the following will be implemented:</span></span><br><span class="line"><span class="comment">             - source hostname (see interserver_http_host), but then it will depends from DNS,</span></span><br><span class="line"><span class="comment">               it can use IP address instead, but then the you need to get correct on the initiator node.</span></span><br><span class="line"><span class="comment">             - target hostname / ip address (same notes as for source hostname)</span></span><br><span class="line"><span class="comment">             - time-based security tokens</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;secret&gt;&lt;/secret&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Optional. Whether to write data to just one of the replicas. Default: false (write data to all replicas). --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;internal_replication&gt;false&lt;/internal_replication&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Optional. Shard weight when writing data. Default: 1. --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;weight&gt;1&lt;/weight&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">host</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Optional. Priority of the replica for load_balancing. Default: 1 (less value has more priority). --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;priority&gt;1&lt;/priority&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test_shard_localhost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test_cluster_one_shard_three_replicas_localhost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>false<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">host</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">host</span>&gt;</span>127.0.0.2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">host</span>&gt;</span>127.0.0.3<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--shard&gt;</span></span><br><span class="line"><span class="comment">            &lt;internal_replication&gt;false&lt;/internal_replication&gt;</span></span><br><span class="line"><span class="comment">            &lt;replica&gt;</span></span><br><span class="line"><span class="comment">                &lt;host&gt;127.0.0.1&lt;/host&gt;</span></span><br><span class="line"><span class="comment">                &lt;port&gt;9000&lt;/port&gt;</span></span><br><span class="line"><span class="comment">            &lt;/replica&gt;</span></span><br><span class="line"><span class="comment">            &lt;replica&gt;</span></span><br><span class="line"><span class="comment">                &lt;host&gt;127.0.0.2&lt;/host&gt;</span></span><br><span class="line"><span class="comment">                &lt;port&gt;9000&lt;/port&gt;</span></span><br><span class="line"><span class="comment">            &lt;/replica&gt;</span></span><br><span class="line"><span class="comment">            &lt;replica&gt;</span></span><br><span class="line"><span class="comment">                &lt;host&gt;127.0.0.3&lt;/host&gt;</span></span><br><span class="line"><span class="comment">                &lt;port&gt;9000&lt;/port&gt;</span></span><br><span class="line"><span class="comment">            &lt;/replica&gt;</span></span><br><span class="line"><span class="comment">        &lt;/shard--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test_cluster_one_shard_three_replicas_localhost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test_cluster_two_shards_localhost</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">host</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">host</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test_cluster_two_shards_localhost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test_cluster_two_shards</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">host</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">host</span>&gt;</span>127.0.0.2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test_cluster_two_shards</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test_cluster_two_shards_internal_replication</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">host</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">host</span>&gt;</span>127.0.0.2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test_cluster_two_shards_internal_replication</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test_shard_localhost_secure</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">host</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9440<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">secure</span>&gt;</span>1<span class="tag">&lt;/<span class="name">secure</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test_shard_localhost_secure</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test_unavailable_shard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">host</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">host</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>1<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test_unavailable_shard</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">remote_servers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s3.bmp.ovh/imgs/2022/06/08/ea237d9501dc4d01.png"></p>
<h4><span id="3-3-1-xie-ru-shu-ju">3.3.1 写入数据</span><a href="#3-3-1-xie-ru-shu-ju" class="header-anchor">#</a></h4><p>官方提供了向集群写入数据的两种方式：</p>
<ol>
<li>由应用程序决定数据写入什么<strong>数据表</strong>，并直接在指定的分片上写入；查询的时候，使用<strong>分布式表</strong>进行查询；这样是最灵活的方案，</li>
</ol>
<blockquote>
<p>你可以使用任何分片方案，对于复杂业务特性的需求，这可能是非常重要的。 这也是最佳解决方案，因为数据可以完全独立地写入不同的分片。</p>
</blockquote>
<ol start="2">
<li>在<strong>分布式表</strong>上进行insert，这种情况下，由分布式表来进行跨服务分发数据。</li>
</ol>
<blockquote>
<p>二，在分布式表上执行 INSERT。在这种情况下，分布式表会跨服务器分发插入数据。 为了写入分布式表，必须要配置分片键（最后一个参数）。当然，如果只有一个分片，则写操作在没有分片键的情况下也能工作，因为这种情况下分片键没有意义。</p>
<p>每个分片都可以在配置文件中定义权重。默认情况下，权重等于1。数据依据分片权重按比例分发到分片上。例如，如果有两个分片，第一个分片的权重是9，而第二个分片的权重是10，则发送 9 &#x2F; 19 的行到第一个分片， 10 &#x2F; 19 的行到第二个分片。</p>
<p>分片可在配置文件中定义 ‘internal_replication’ 参数。<strong>默认是false，推荐使用true。</strong></p>
<p>此参数设置为«true»时，写操作只选一个正常的副本写入数据。如果分布式表的子表是复制表(*ReplicaMergeTree)，请使用此方案。换句话说，这其实是把数据的复制工作交给实际需要写入数据的表本身而不是分布式表。</p>
<p>若此参数设置为«false»（默认值），写操作会将数据写入所有副本。实质上，这意味着要分布式表本身来复制数据。这种方式不如使用复制表的好，因为不会检查副本的一致性，并且随着时间的推移，副本数据可能会有些不一样。</p>
</blockquote>
<h4><span id="3-3-2-du-qu-shu-ju">3.3.2 读取数据</span><a href="#3-3-2-du-qu-shu-ju" class="header-anchor">#</a></h4><p>通过分布式表读取数据，分布式表会自动整合各个分片的数据；</p>
<blockquote>
<p>当查询一个<code>Distributed</code>表时，<code>SELECT</code>查询被发送到所有的分片，不管数据是如何分布在分片上的(它们可以完全随机分布)。当您添加一个新分片时，您不必将旧数据传输到它。相反，您可以使用更重的权重向其写入新数据——数据的分布会稍微不均匀，但查询将正确有效地工作。</p>
</blockquote>
<h3><span id="3-4-yu-ju">3.4.语句</span><a href="#3-4-yu-ju" class="header-anchor">#</a></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Distributed(cluster_name, database, <span class="keyword">table</span>, [sharding_key]);</span><br></pre></td></tr></table></figure>

<p>参数解析：<br>      cluster_name：服务器配置文件中的集群名，在&#x2F;etc&#x2F;metrika.xml中配置的。具体配置见前文。<br>      database：数据库名。<br>      table：表名。<br>      sharding_key：数据分片键。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dis_table(id UInt16, name String) engine<span class="operator">=</span>Distributed(clickhouse_cluster, <span class="keyword">default</span>, t(数据表), id(分片键));</span><br></pre></td></tr></table></figure>

<p>在配置好集群的remote_server配置以及负载的策略后，重启clickhouse-server服务即可生效，再执行上述语句可以实现节点同步新增表dis_table，新增数据时，只会在其中一个<strong>shard</strong>新增。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">clickhouse-server restart</span><br></pre></td></tr></table></figure>



<h2><span id="4-can-kao-zi-liao">4.参考资料</span><a href="#4-can-kao-zi-liao" class="header-anchor">#</a></h2><p><a href="https://clickhouse.com/docs/zh/getting-started/">https://clickhouse.com/docs/zh/getting-started/</a></p>
<p><a href="https://clickhouse.com/docs/zh/engines/table-engines/mergetree-family/custom-partitioning-key#alter_attach-partition">https://clickhouse.com/docs/zh/engines/table-engines/mergetree-family/custom-partitioning-key#alter_attach-partition</a></p>
<p><a href="https://juejin.cn/post/7073021690875215885">https://juejin.cn/post/7073021690875215885</a></p>
<p><a href="https://juejin.cn/post/6897418615075635214">https://juejin.cn/post/6897418615075635214</a></p>
<p><a href="https://blog.csdn.net/congge_study/article/details/123822299">https://blog.csdn.net/congge_study/article/details/123822299</a></p>
<p><a href="https://www.bilibili.com/video/BV1xg411w7AP?p=11">https://www.bilibili.com/video/BV1xg411w7AP?p=11</a></p>
]]></content>
  </entry>
  <entry>
    <title>clickhouse-jdbc 源码学习</title>
    <url>/2022/06/28/ru.yandex.clickhouse.clickhouse-jdbc%20%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1><span id="clickhouse-jdbc-yuan-ma-xue-xi">clickhouse-jdbc 源码学习</span><a href="#clickhouse-jdbc-yuan-ma-xue-xi" class="header-anchor">#</a></h1><div class="toc">

<!-- toc -->

<ul>
<li><a href="#bao-jie-shao">包介绍</a><ul>
<li><a href="#yi-lai-ban-ben">依赖版本</a></li>
<li><a href="#da-jian-huan-jing-ban-ben-ru-xia">搭建环境版本如下</a></li>
</ul>
</li>
<li><a href="#qa">QA</a><ul>
<li><a href="#1-localdate-localdatetime-bu-jian-rong">1.LocalDate&#x2F;LocalDateTime不兼容</a></li>
<li><a href="#2-yi-ci-cha-xun-qing-qiu-de-yuan-ma-zhui-zong">2.一次查询请求的源码追踪</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>



<h2><span id="bao-jie-shao">包介绍</span><a href="#bao-jie-shao" class="header-anchor">#</a></h2><h3><span id="yi-lai-ban-ben">依赖版本</span><a href="#yi-lai-ban-ben" class="header-anchor">#</a></h3><p>本次研究源码依赖的版本如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.clickhouse<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clickhouse-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>	<span class="comment">&lt;!-- 0.2.4/0.2.5/0.2.6/0.3.0/0.3.2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>官方github有言，不再推荐使用ru.yandex.clickhouse的groupId依赖，以及ru.yandex.clickhouse.ClickHouseDriver的驱动</p>
<blockquote>
<p>Maven groupId ru.yandex.clickhouse and legacy JDBC driver ru.yandex.clickhouse.ClickHouseDriver are deprecated.</p>
<p>Please use new groupId com.clickhouse and driver com.clickhouse.jdbc.ClickHouseDriver instead. It’s highly recommended to upgrade to 0.3.2+ and start to integrate the new JDBC driver for improved performance and stability.</p>
<p>New JDBC driver class is com.clickhouse.jdbc.ClickHouseDriver(will remove ru.yandex.clickhouse.ClickHouseDriver starting from 0.4.0)</p>
</blockquote>
<p>具体的更新日志可以看如下链接<a href="https://github.com/ClickHouse/clickhouse-jdbc/issues/768">https://github.com/ClickHouse/clickhouse-jdbc/issues/768</a></p>
<h3><span id="da-jian-huan-jing-ban-ben-ru-xia">搭建环境版本如下</span><a href="#da-jian-huan-jing-ban-ben-ru-xia" class="header-anchor">#</a></h3><table>
<thead>
<tr>
<th>包</th>
<th>版本</th>
</tr>
</thead>
<tbody><tr>
<td>spring-boot-starter-parent</td>
<td>2.3.2.RELEASE</td>
</tr>
<tr>
<td>mybatis-plus-boot-starter</td>
<td>3.4.3.4</td>
</tr>
<tr>
<td>dynamic-datasource-spring-boot-starter</td>
<td>3.2.0</td>
</tr>
<tr>
<td>mybatis</td>
<td>3.5.7</td>
</tr>
<tr>
<td>mysql-connector-java</td>
<td>8.0.25</td>
</tr>
<tr>
<td>mybatis-plus-generator</td>
<td>3.5.1</td>
</tr>
<tr>
<td>clickhouse-jdbc</td>
<td>0.2.4&#x2F;0.2.5&#x2F;0.2.6&#x2F;0.3.0&#x2F;0.3.2</td>
</tr>
</tbody></table>
<h2><span id="qa">QA</span><a href="#qa" class="header-anchor">#</a></h2><h3><span id="1-localdate-x2f-localdatetime-bu-jian-rong">1.LocalDate&#x2F;LocalDateTime不兼容</span><a href="#1-localdate-x2f-localdatetime-bu-jian-rong" class="header-anchor">#</a></h3><p><strong>Q</strong></p>
<p>使用mybatis-plus-generator插件生成库表实例，一般来说，日期、时间、时间戳的类型可能使用java.util.Date或者java.time.LocalDate或者java.time.LocalDateTime等类型映射。</p>
<p>在使用java.time.LocalDate和java.time.LocalDateTime时，使用了查询sql在结果集映射时报错类型不支持：Not implemented for type&#x3D;class java.time.LocalDateTime</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">2022</span>-<span class="number">06</span>-<span class="number">13</span> <span class="number">10</span>:<span class="number">53</span>:<span class="number">45.682</span>] [] [http-nio-<span class="number">8991</span>-exec-<span class="number">1</span>] [ERROR] [] org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:<span class="number">175</span>) - Servlet.service() <span class="keyword">for</span> servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.UncategorizedSQLException: Error attempting to get column <span class="string">&#x27;date_time_str&#x27;</span> from result set.  Cause: java.sql.SQLException: Not implemented <span class="keyword">for</span> type=<span class="keyword">class</span> <span class="title class_">java</span>.time.LocalDateTime</span><br><span class="line">; uncategorized SQLException; SQL state [<span class="literal">null</span>]; error code [<span class="number">0</span>]; Not implemented <span class="keyword">for</span> type=<span class="keyword">class</span> <span class="title class_">java</span>.time.LocalDateTime; nested exception is java.sql.SQLException: Not implemented <span class="keyword">for</span> type=<span class="keyword">class</span> <span class="title class_">java</span>.time.LocalDateTime] with root cause</span><br><span class="line">java.sql.SQLException: Not implemented <span class="keyword">for</span> type=<span class="keyword">class</span> <span class="title class_">java</span>.time.LocalDateTime</span><br><span class="line">	at ru.yandex.clickhouse.response.ClickHouseResultSet.getObject(ClickHouseResultSet.java:<span class="number">661</span>) ~[clickhouse-jdbc-<span class="number">0.2</span><span class="number">.6</span>.jar:<span class="number">0.2</span><span class="number">.6</span>]</span><br><span class="line">	at ru.yandex.clickhouse.response.ClickHouseResultSet.getObject(ClickHouseResultSet.java:<span class="number">666</span>) ~[clickhouse-jdbc-<span class="number">0.2</span><span class="number">.6</span>.jar:<span class="number">0.2</span><span class="number">.6</span>]</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getObject(FilterChainImpl.java:<span class="number">1431</span>) ~[druid-<span class="number">1.2</span><span class="number">.5</span>.jar:<span class="number">1.2</span><span class="number">.5</span>]</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.resultSet_getObject(FilterAdapter.java:<span class="number">1719</span>) ~[druid-<span class="number">1.2</span><span class="number">.5</span>.jar:<span class="number">1.2</span><span class="number">.5</span>]</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getObject(FilterChainImpl.java:<span class="number">1427</span>) ~[druid-<span class="number">1.2</span><span class="number">.5</span>.jar:<span class="number">1.2</span><span class="number">.5</span>]</span><br><span class="line">	at com.alibaba.druid.filter.stat.StatFilter.resultSet_getObject(StatFilter.java:<span class="number">855</span>) ~[druid-<span class="number">1.2</span><span class="number">.5</span>.jar:<span class="number">1.2</span><span class="number">.5</span>]</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.resultSet_getObject(FilterChainImpl.java:<span class="number">1427</span>) ~[druid-<span class="number">1.2</span><span class="number">.5</span>.jar:<span class="number">1.2</span><span class="number">.5</span>]</span><br><span class="line">	at com.alibaba.druid.proxy.jdbc.ResultSetProxyImpl.getObject(ResultSetProxyImpl.java:<span class="number">1561</span>) ~[druid-<span class="number">1.2</span><span class="number">.5</span>.jar:<span class="number">1.2</span><span class="number">.5</span>]</span><br><span class="line">	at com.alibaba.druid.pool.DruidPooledResultSet.getObject(DruidPooledResultSet.java:<span class="number">1777</span>) ~[druid-<span class="number">1.2</span><span class="number">.5</span>.jar:<span class="number">1.2</span><span class="number">.5</span>]</span><br><span class="line">	at org.apache.ibatis.type.LocalDateTimeTypeHandler.getNullableResult(LocalDateTimeTypeHandler.java:<span class="number">38</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.type.LocalDateTimeTypeHandler.getNullableResult(LocalDateTimeTypeHandler.java:<span class="number">28</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.type.BaseTypeHandler.getResult(BaseTypeHandler.java:<span class="number">85</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.applyAutomaticMappings(DefaultResultSetHandler.java:<span class="number">561</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:<span class="number">403</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForSimpleResultMap(DefaultResultSetHandler.java:<span class="number">355</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:<span class="number">329</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:<span class="number">302</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:<span class="number">195</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:<span class="number">65</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:<span class="number">79</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:<span class="number">63</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:<span class="number">325</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:<span class="number">156</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:<span class="number">109</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:<span class="number">89</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:<span class="number">151</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:<span class="number">145</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:<span class="number">140</span>) ~[mybatis-<span class="number">3.5</span><span class="number">.7</span>.jar:<span class="number">3.5</span><span class="number">.7</span>]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:<span class="number">427</span>) ~[mybatis-spring-<span class="number">2.0</span><span class="number">.6</span>.jar:<span class="number">2.0</span><span class="number">.6</span>]</span><br><span class="line">	at com.sun.proxy.$Proxy83.selectList(Unknown Source) ~[?:?]</span><br><span class="line">	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:<span class="number">224</span>) ~[mybatis-spring-<span class="number">2.0</span><span class="number">.6</span>.jar:<span class="number">2.0</span><span class="number">.6</span>]</span><br><span class="line">	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:<span class="number">166</span>) ~[mybatis-plus-core-<span class="number">3.4</span><span class="number">.3</span><span class="number">.4</span>.jar:<span class="number">3.4</span><span class="number">.3</span><span class="number">.4</span>]</span><br><span class="line">	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:<span class="number">77</span>) ~[mybatis-plus-core-<span class="number">3.4</span><span class="number">.3</span><span class="number">.4</span>.jar:<span class="number">3.4</span><span class="number">.3</span><span class="number">.4</span>]</span><br><span class="line">	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:<span class="number">148</span>) ~[mybatis-plus-core-<span class="number">3.4</span><span class="number">.3</span><span class="number">.4</span>.jar:<span class="number">3.4</span><span class="number">.3</span><span class="number">.4</span>]</span><br><span class="line">	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:<span class="number">89</span>) ~[mybatis-plus-core-<span class="number">3.4</span><span class="number">.3</span><span class="number">.4</span>.jar:<span class="number">3.4</span><span class="number">.3</span><span class="number">.4</span>]</span><br><span class="line">	at com.sun.proxy.$Proxy87.selectList(Unknown Source) ~[?:?]</span><br><span class="line">	at com.baomidou.mybatisplus.core.mapper.BaseMapper.selectOne(BaseMapper.java:<span class="number">174</span>) ~[mybatis-plus-core-<span class="number">3.4</span><span class="number">.3</span><span class="number">.4</span>.jar:<span class="number">3.4</span><span class="number">.3</span><span class="number">.4</span>]</span><br><span class="line">	at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:<span class="number">627</span>) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$DefaultMethodInvoker.invoke(MybatisMapperProxy.java:<span class="number">162</span>) ~[mybatis-plus-core-<span class="number">3.4</span><span class="number">.3</span><span class="number">.4</span>.jar:<span class="number">3.4</span><span class="number">.3</span><span class="number">.4</span>]</span><br><span class="line">	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:<span class="number">89</span>) ~[mybatis-plus-core-<span class="number">3.4</span><span class="number">.3</span><span class="number">.4</span>.jar:<span class="number">3.4</span><span class="number">.3</span><span class="number">.4</span>]</span><br><span class="line">	at com.sun.proxy.$Proxy87.selectOne(Unknown Source) ~[?:?]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:<span class="number">344</span>) ~[spring-aop-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:<span class="number">198</span>) ~[spring-aop-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">163</span>) ~[spring-aop-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationInterceptor.invoke(DynamicDataSourceAnnotationInterceptor.java:<span class="number">46</span>) ~[dynamic-datasource-spring-boot-starter-<span class="number">3.2</span><span class="number">.0</span>.jar:<span class="number">3.2</span><span class="number">.0</span>]</span><br><span class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">186</span>) ~[spring-aop-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:<span class="number">212</span>) ~[spring-aop-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at com.sun.proxy.$Proxy88.selectOne(Unknown Source) ~[?:?]</span><br><span class="line">	at com.zeekr.bigdata.data.portal.controller.TestController.querySlave2(TestController.java:<span class="number">63</span>) ~[classes/:?]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>) ~[?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:<span class="number">190</span>) ~[spring-web-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:<span class="number">138</span>) ~[spring-web-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:<span class="number">105</span>) ~[spring-webmvc-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:<span class="number">878</span>) ~[spring-webmvc-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:<span class="number">792</span>) ~[spring-webmvc-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:<span class="number">87</span>) ~[spring-webmvc-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">1040</span>) ~[spring-webmvc-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:<span class="number">943</span>) ~[spring-webmvc-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:<span class="number">1006</span>) ~[spring-webmvc-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:<span class="number">898</span>) ~[spring-webmvc-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">626</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">4.0</span>.FR]</span><br><span class="line">	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:<span class="number">883</span>) ~[spring-webmvc-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">733</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">4.0</span>.FR]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">231</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:<span class="number">53</span>) ~[tomcat-embed-websocket-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:<span class="number">100</span>) ~[spring-web-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">119</span>) ~[spring-web-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:<span class="number">93</span>) ~[spring-web-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">119</span>) ~[spring-web-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:<span class="number">201</span>) ~[spring-web-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">119</span>) ~[spring-web-<span class="number">5.2</span><span class="number">.8</span>.RELEASE.jar:<span class="number">5.2</span><span class="number">.8</span>.RELEASE]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">193</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">166</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:<span class="number">202</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:<span class="number">96</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:<span class="number">541</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:<span class="number">139</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="number">92</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:<span class="number">74</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="number">343</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:<span class="number">373</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:<span class="number">65</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:<span class="number">868</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="number">1589</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:<span class="number">49</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>) [?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>) [?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br><span class="line">	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="number">61</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.37</span>.jar:<span class="number">9.0</span><span class="number">.37</span>]</span><br><span class="line">	at java.lang.Thread.run(Thread.java:<span class="number">748</span>) [?:<span class="number">1.8</span><span class="number">.0_291</span>]</span><br></pre></td></tr></table></figure>

<p><strong>A</strong></p>
<p>跟踪源码，在mybatis执行类型映射的时候，会调用到这样一段自动映射的方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">applyAutomaticMappings</span><span class="params">(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, String columnPrefix)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    List&lt;UnMappedColumnAutoMapping&gt; autoMapping = createAutomaticMappings(rsw, resultMap, metaObject, columnPrefix);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">foundValues</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!autoMapping.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">for</span> (UnMappedColumnAutoMapping mapping : autoMapping) &#123;</span><br><span class="line">          <span class="comment">// 在这里会根据结果集和列名称，找到结果集中的列，并获取该类型的handler，在这里的场景时LocalDateTime，因此获取的是LocalDateTimeTypeHandler，如果是java.util.Date类型，则获取的是DateTypeHandler</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> mapping.typeHandler.getResult(rsw.getResultSet(), mapping.column);</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">          foundValues = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span> || (configuration.isCallSettersOnNulls() &amp;&amp; !mapping.primitive)) &#123;</span><br><span class="line">          <span class="comment">// gcode issue #377, call setter on nulls (value is not &#x27;found&#x27;)</span></span><br><span class="line">          metaObject.setValue(mapping.property, value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> foundValues;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>LocalDateTimeTypeHandler会根据当前数据库连接的类型，从指定类型的resultset中调用getObject方法，在这里调用的是ClickHouseResultSet的public <t> T getObject(int columnIndex, Class<t> type) throws SQLException方法；</t></t></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getObject</span><span class="params">(<span class="type">int</span> columnIndex, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">if</span>(type.equals(UUID.class)) &#123;	<span class="comment">//这里传入的type类型是java.time.LocalDateTime</span></span><br><span class="line">    	<span class="keyword">return</span> (T) UUID.fromString(getString(columnIndex));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="string">&quot;Not implemented for type=&quot;</span> + type.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，如果类型不是UUID.class，就会走进else分支而报错。这里可能是作者的一个bug或者说是作者还没有在这里做到多类型的getObject兼容；</p>
<p>于是想到升级版本或许问题可以得到解决。</p>
<p>到maven官网找到clickhouse-jdbc的包，查询了changelog，从0.3.0的日志中得到如下情报：</p>
<ul>
<li>support more data types: IPv4, IPv6, Int128, UInt128, Int256, UInt256, Decimal256, DateTime*, and Map</li>
</ul>
<p>这里没有提到LocalDateTime，但是决定还是一试；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.3.0</span><br><span class="line">  * BREAKING CHANGE - dropped JDK 7 support</span><br><span class="line">  * BREAKING CHANGE - removed Guava dependency(and so is UnsignedLong)</span><br><span class="line">  * JDBC 4.2 support</span><br><span class="line">  * add connection setting client_name for load-balancing and troubleshooting</span><br><span class="line">  * add writeBytes &amp; writeUUIDArray and remove UnsignedLong related methods in ClickHouseRowBinaryStream</span><br><span class="line">  * support more data types: IPv4, IPv6, Int128, UInt128, Int256, UInt256, Decimal256, DateTime*, and Map</span><br><span class="line">  * support ORC/Parquet streaming</span><br><span class="line">  * support read/write Bitmap from/into AggregateFunction(groupBitmap, UInt[8-64]) column</span><br><span class="line">  * throw SQLException instead of RuntimeException when instantiating ClickHouseConnectionImpl</span><br><span class="line">  * fix error when using ClickHouseCompression.none against 19.16</span><br><span class="line">  * fix NegativeArraySizeException when dealing with large array</span><br><span class="line">  * fix datetime/date display issue caused by timezone differences(between client and column/server)</span><br></pre></td></tr></table></figure>

<p>在升级0.3.0后再看源码，发现有变化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getObject</span><span class="params">(<span class="type">int</span> columnIndex, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">       <span class="keyword">if</span> (String.class.equals(type)) &#123;</span><br><span class="line">           <span class="keyword">return</span> (T) getString(columnIndex);</span><br><span class="line">       &#125;</span><br><span class="line">	<span class="comment">// 这里if匹配不到的情况不再直接抛出异常，二十走下面的分支，在ClickHouseValueParser.getParser(type).parse(getValue(columnIndex), columnInfo, tz)中进行解析</span></span><br><span class="line">       <span class="type">ClickHouseColumnInfo</span> <span class="variable">columnInfo</span> <span class="operator">=</span> getColumnInfo(columnIndex);</span><br><span class="line">       <span class="type">TimeZone</span> <span class="variable">tz</span> <span class="operator">=</span> getEffectiveTimeZone(columnInfo);</span><br><span class="line">       <span class="keyword">return</span> columnInfo.isArray()</span><br><span class="line">           ? (Array.class.isAssignableFrom(type) ? (T) getArray(columnIndex) : (T) getArray(columnIndex).getArray())</span><br><span class="line">           : ClickHouseValueParser.getParser(type).parse(getValue(columnIndex), columnInfo, tz);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>进入ClickHouseValueParser.getParser源码，终于看到了类型支持的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Map&lt;Class&lt;?&gt;, ClickHouseValueParser&lt;?&gt;&gt; parsers;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">       parsers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       register(Array.class, ClickHouseArrayParser.getInstance());</span><br><span class="line">       register(BigDecimal.class, BigDecimal::<span class="keyword">new</span>);</span><br><span class="line">       register(BigInteger.class, BigInteger::<span class="keyword">new</span>);</span><br><span class="line">       register(Boolean.class,</span><br><span class="line">           s -&gt; Boolean.valueOf(<span class="string">&quot;1&quot;</span>.equals(s) || Boolean.parseBoolean(s)),</span><br><span class="line">           Boolean.FALSE);</span><br><span class="line">       register(Date.class, ClickHouseSQLDateParser.getInstance());</span><br><span class="line">       register(Double.class, ClickHouseDoubleParser.getInstance());</span><br><span class="line">       register(Float.class,</span><br><span class="line">           Float::valueOf,</span><br><span class="line">           Float.valueOf(<span class="number">0f</span>),</span><br><span class="line">           Float.valueOf(Float.NaN));</span><br><span class="line">       register(Instant.class, ClickHouseInstantParser.getInstance());</span><br><span class="line">       register(Integer.class, Integer::decode, Integer.valueOf(<span class="number">0</span>));</span><br><span class="line">       register(LocalDate.class, ClickHouseLocalDateParser.getInstance());</span><br><span class="line">       register(LocalDateTime.class, ClickHouseLocalDateTimeParser.getInstance());</span><br><span class="line">       register(LocalTime.class, ClickHouseLocalTimeParser.getInstance());</span><br><span class="line">       register(Long.class, Long::decode, Long.valueOf(<span class="number">0L</span>));</span><br><span class="line">       register(ClickHouseBitmap.class, ClickHouseBitmapParser.getInstance());</span><br><span class="line">       register(Map.class, ClickHouseMapParser.getInstance());</span><br><span class="line">       register(Object.class, s -&gt; s);</span><br><span class="line">       register(OffsetDateTime.class, ClickHouseOffsetDateTimeParser.getInstance());</span><br><span class="line">       register(OffsetTime.class, ClickHouseOffsetTimeParser.getInstance());</span><br><span class="line">       register(Short.class, Short::decode, Short.valueOf((<span class="type">short</span>) <span class="number">0</span>));</span><br><span class="line">       register(String.class, ClickHouseStringParser.getInstance());</span><br><span class="line">       register(Time.class, ClickHouseSQLTimeParser.getInstance());</span><br><span class="line">       register(Timestamp.class, ClickHouseSQLTimestampParser.getInstance());</span><br><span class="line">       register(UUID.class, UUID::fromString);</span><br><span class="line">       register(ZonedDateTime.class, ClickHouseZonedDateTimeParser.getInstance());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ClickHouseValueParser&lt;T&gt; <span class="title function_">getParser</span><span class="params">(Class&lt;T&gt; clazz)</span></span><br><span class="line">       <span class="keyword">throws</span> SQLException</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 这里parsers是一个静态的map对象，在类初始化时就做好的类型注册</span></span><br><span class="line">       ClickHouseValueParser&lt;T&gt; p = (ClickHouseValueParser&lt;T&gt;) parsers.get(clazz);</span><br><span class="line">       <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClickHouseUnknownException</span>(</span><br><span class="line">               <span class="string">&quot;No value parser for class &#x27;&quot;</span> + clazz.getName() + <span class="string">&quot;&#x27;&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> p;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>至此，基本可以下结论，**&gt;&#x3D;0.3.0<strong>的版本，可以支持LocalDateTime类型，</strong>&lt;0.3.0**不能支持；</p>
<p>为保险起见还是将0.2.4到0.3.2的版本的源码都看了一遍，<strong>的确如上面的结论那样</strong>。故本选用最新0.3.2版本；</p>
<h3><span id="2-yi-ci-cha-xun-qing-qiu-de-yuan-ma-zhui-zong">2.一次查询请求的源码追踪</span><a href="#2-yi-ci-cha-xun-qing-qiu-de-yuan-ma-zhui-zong" class="header-anchor">#</a></h3><p>使用springboot+mybatisplus+druid+clickhouse-jdbc的组合，注定能擦出一点火花；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; results = queryEngineMapper.queryM241TableFieldsConditionsPage(sysDictService.convertTableName(tableName), fields, conditions, dateTimeBeg, dateTimeEnd, (pageNum - <span class="number">1</span>) * pageSize, pageSize);</span><br></pre></td></tr></table></figure>

<p>上面是一段通过mybatis查询clickhouse的调用，mapper写的比较简单，就是普通的动态sql写法；</p>
<p>就用debug的方式进入源码看看</p>
<p>在进入ck源码的最后一个调用栈是在com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(PreparedStatementProxy statement)  line 3461</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preparedStatement_execute</span><span class="params">(PreparedStatementProxy statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.pos &lt; filterSize) &#123;</span><br><span class="line">        <span class="keyword">return</span> nextFilter().preparedStatement_execute(<span class="built_in">this</span>, statement);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在这里进入</span></span><br><span class="line">    <span class="keyword">return</span> statement.getRawObject().execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入后就调起clickhouse-jdbc的源码部分了，首先进入的是ru.yandex.clickhouse.ClickHousePreparedStatementImpl line 139</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">return</span> executeQueryStatement(buildSql(), <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>) != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来到ClickHouseStatementImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> ResultSet <span class="title function_">executeQueryStatement</span><span class="params">(ClickHouseSqlStatement stmt,</span></span><br><span class="line"><span class="params">                                          Map&lt;ClickHouseQueryParam, String&gt; additionalDBParams, List&lt;ClickHouseExternalData&gt; externalData,</span></span><br><span class="line"><span class="params">                                          Map&lt;String, String&gt; additionalRequestParams)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="comment">// 设置db参数</span></span><br><span class="line">    additionalDBParams = importAdditionalDBParameters(additionalDBParams);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置format参数</span></span><br><span class="line">    stmt = applyFormat(stmt, ClickHouseFormat.TabSeparatedWithNamesAndTypes);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立连接，获取输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> getInputStream(stmt, additionalDBParams, externalData, additionalRequestParams);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//对查询结果封装结果集ResultSet</span></span><br><span class="line">        <span class="keyword">return</span> updateResult(stmt, is);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;can not close stream: %s&quot;</span>, ioe.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> ClickHouseExceptionSpecifier.specify(e, properties.getHost(), properties.getPort());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续跟踪getInputStream方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> InputStream <span class="title function_">getInputStream</span><span class="params">(ClickHouseSqlStatement parsedStmt,</span></span><br><span class="line"><span class="params">            Map&lt;ClickHouseQueryParam, String&gt; additionalClickHouseDBParams, List&lt;ClickHouseExternalData&gt; externalData,</span></span><br><span class="line"><span class="params">            Map&lt;String, String&gt; additionalRequestParams)</span> <span class="keyword">throws</span> ClickHouseException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> parsedStmt.getSQL();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ignoreDatabase</span> <span class="operator">=</span> parsedStmt.isRecognized() &amp;&amp; !parsedStmt.isDML()</span><br><span class="line">                &amp;&amp; parsedStmt.containsKeyword(<span class="string">&quot;DATABASE&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (parsedStmt.getStatementType() == StatementType.USE) &#123;</span><br><span class="line">            <span class="comment">// 这里大费周章，就是识别user database这种语句</span></span><br><span class="line">            currentDatabase = parsedStmt.getDatabaseOrDefault(currentDatabase);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;Executing SQL: %s&quot;</span>, sql);</span><br><span class="line"></span><br><span class="line">    	<span class="comment">//这里会生成一个queryId并赋值到params里面，additionalClickHouseDBParams外面方法传进来的是个bull值，因此这里会走三目表达式的true分支，由于构造器里的实现是默认值queryId为null，因此这里会生成queryId。clickhouse-jdbc使用的是uuid生成queryId，可见下一份代码块</span></span><br><span class="line">        additionalClickHouseDBParams = addQueryIdTo(additionalClickHouseDBParams == <span class="literal">null</span></span><br><span class="line">                ? <span class="keyword">new</span> <span class="title class_">EnumMap</span>&lt;ClickHouseQueryParam, String&gt;(ClickHouseQueryParam.class)</span><br><span class="line">                : additionalClickHouseDBParams);</span><br><span class="line">		</span><br><span class="line">    	<span class="comment">// 参数准备完毕，建立uri连接，后面将使用httpclient进行clickhouse的访问，使用post请求</span></span><br><span class="line">        <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> buildRequestUri(<span class="literal">null</span>, externalData, additionalClickHouseDBParams, additionalRequestParams,</span><br><span class="line">                ignoreDatabase);</span><br><span class="line">        log.debug(<span class="string">&quot;Request url: %s&quot;</span>, uri);</span><br><span class="line"></span><br><span class="line">        HttpEntity requestEntity;</span><br><span class="line">        <span class="keyword">if</span> (externalData == <span class="literal">null</span> || externalData.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 没有额外的参数的话默认走这个分支，创建请求实体；</span></span><br><span class="line">            requestEntity = <span class="keyword">new</span> <span class="title class_">StringEntity</span>(sql, StandardCharsets.UTF_8);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">MultipartEntityBuilder</span> <span class="variable">entityBuilder</span> <span class="operator">=</span> MultipartEntityBuilder.create();</span><br><span class="line"></span><br><span class="line">            <span class="type">ContentType</span> <span class="variable">queryContentType</span> <span class="operator">=</span> ContentType.create(ContentType.TEXT_PLAIN.getMimeType(),</span><br><span class="line">                    StandardCharsets.UTF_8);</span><br><span class="line">            entityBuilder.addTextBody(<span class="string">&quot;query&quot;</span>, sql, queryContentType);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (ClickHouseExternalData externalDataItem : externalData) &#123;</span><br><span class="line">                    <span class="comment">// clickhouse may return 400 (bad request) when chunked encoding is used with</span></span><br><span class="line">                    <span class="comment">// multipart request</span></span><br><span class="line">                    <span class="comment">// so read content to byte array to avoid chunked encoding</span></span><br><span class="line">                    <span class="comment">// TODO do not read stream into memory when this issue is fixed in clickhouse</span></span><br><span class="line">                    entityBuilder.addBinaryBody(externalDataItem.getName(),</span><br><span class="line">                            Utils.toByteArray(externalDataItem.getContent()), ContentType.APPLICATION_OCTET_STREAM,</span><br><span class="line">                            externalDataItem.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            requestEntity = entityBuilder.build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        requestEntity = applyRequestBodyCompression(requestEntity);</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            uri = followRedirects(uri);</span><br><span class="line">            <span class="comment">// 这里开始创建post请求</span></span><br><span class="line">            <span class="type">HttpPost</span> <span class="variable">post</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(uri);</span><br><span class="line">            post.setEntity(requestEntity);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (parsedStmt.isIdemponent()) &#123;</span><br><span class="line">                <span class="comment">// 这个参数表示是否幂等</span></span><br><span class="line">                httpContext.setAttribute(<span class="string">&quot;is_idempotent&quot;</span>, Boolean.TRUE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                httpContext.removeAttribute(<span class="string">&quot;is_idempotent&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// post请求的响应结果进行解析，处理异常情况</span></span><br><span class="line">            <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.execute(post, httpContext);</span><br><span class="line">            entity = response.getEntity();</span><br><span class="line">            checkForErrorAndThrow(entity, response);</span><br><span class="line"></span><br><span class="line">            InputStream is;</span><br><span class="line">            <span class="keyword">if</span> (entity.isStreaming()) &#123;</span><br><span class="line">                <span class="comment">// 这里用的是流式读取</span></span><br><span class="line">                is = entity.getContent();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">FastByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastByteArrayOutputStream</span>();</span><br><span class="line">                entity.writeTo(baos);</span><br><span class="line">                is = baos.convertToInputStream();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// retrieve response summary</span></span><br><span class="line">            <span class="keyword">if</span> (isQueryParamSet(ClickHouseQueryParam.SEND_PROGRESS_IN_HTTP_HEADERS, additionalClickHouseDBParams,</span><br><span class="line">                    additionalRequestParams)) &#123;</span><br><span class="line">                <span class="type">Header</span> <span class="variable">summaryHeader</span> <span class="operator">=</span> response.getFirstHeader(<span class="string">&quot;X-ClickHouse-Summary&quot;</span>);</span><br><span class="line">                currentSummary = summaryHeader != <span class="literal">null</span></span><br><span class="line">                        ? JsonStreamUtils.readObject(summaryHeader.getValue(), ClickHouseResponseSummary.class)</span><br><span class="line">                        : <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回输入流</span></span><br><span class="line">            <span class="keyword">return</span> is;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClickHouseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Error during connection to %s, reporting failure to data source, message: %s&quot;</span>, properties,</span><br><span class="line">                    e.getMessage());</span><br><span class="line">            EntityUtils.consumeQuietly(entity);</span><br><span class="line">            log.info(<span class="string">&quot;Error sql: %s&quot;</span>, sql);</span><br><span class="line">            <span class="keyword">throw</span> ClickHouseExceptionSpecifier.specify(e, properties.getHost(), properties.getPort());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>生成queryId的部分</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">private <span class="title class_">Map</span>&lt;<span class="title class_">ClickHouseQueryParam</span>, <span class="title class_">String</span>&gt; <span class="title function_">addQueryIdTo</span>(<span class="params"><span class="built_in">Map</span>&lt;ClickHouseQueryParam, <span class="built_in">String</span>&gt; parameters</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queryId</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> parameters;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">String</span> queryId = parameters.<span class="title function_">get</span>(<span class="title class_">ClickHouseQueryParam</span>.<span class="property">QUERY_ID</span>);</span><br><span class="line">    <span class="keyword">if</span> (queryId == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// TODO perhaps we should use TimeUUID so that it&#x27;s easy to sort?</span></span><br><span class="line">        <span class="comment">// 这个注释是作者留的，看来作者对这块的queryId的生成也有保留，应该会在后面的版本里去优化</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queryId</span> = <span class="variable constant_">UUID</span>.<span class="title function_">randomUUID</span>().<span class="title function_">toString</span>();</span><br><span class="line">        parameters.<span class="title function_">put</span>(<span class="title class_">ClickHouseQueryParam</span>.<span class="property">QUERY_ID</span>, <span class="variable language_">this</span>.<span class="property">queryId</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queryId</span> = queryId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> parameters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>updateResult拼装返回结果集部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> ResultSet <span class="title function_">updateResult</span><span class="params">(ClickHouseSqlStatement stmt, InputStream is)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClickHouseException &#123;</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (stmt.isQuery()) &#123;</span><br><span class="line">        currentUpdateCount = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 非常的简单粗暴，new一个返回结果集出来</span></span><br><span class="line">        currentResult = createResultSet(properties.isCompress() ? <span class="keyword">new</span> <span class="title class_">ClickHouseLZ4Stream</span>(is) : is,</span><br><span class="line">                                        properties.getBufferSize(), stmt.getDatabaseOrDefault(properties.getDatabase()), stmt.getTable(),</span><br><span class="line">                                        stmt.hasWithTotals(), <span class="built_in">this</span>, getConnection().getTimeZone(), properties);</span><br><span class="line">        currentResult.setMaxRows(maxRows);</span><br><span class="line">        rs = currentResult;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        currentUpdateCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;can not close stream: %s&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ClickHouseResultSet <span class="title function_">createResultSet</span><span class="params">(InputStream is, <span class="type">int</span> bufferSize, String db, String table,</span></span><br><span class="line"><span class="params">                                            <span class="type">boolean</span> usesWithTotals, ClickHouseStatement statement, TimeZone timezone, ClickHouseProperties properties)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 默认是单向的，因此走else</span></span><br><span class="line">    <span class="keyword">if</span> (isResultSetScrollable) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ClickHouseScrollableResultSet</span>(is, bufferSize, db, table, usesWithTotals, statement, timezone,</span><br><span class="line">                                                 properties);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ClickHouseResultSet</span>(is, bufferSize, db, table, usesWithTotals, statement, timezone, properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里跳转到ClickHouseResultSet的构造器，看看他的构造方法里做了哪些处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ClickHouseResultSet</span><span class="params">(InputStream is, <span class="type">int</span> bufferSize, String db, String table,</span></span><br><span class="line"><span class="params">                           <span class="type">boolean</span> usesWithTotals, ClickHouseStatement statement, TimeZone timeZone,</span></span><br><span class="line"><span class="params">                           ClickHouseProperties properties)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">this</span>.db = db;</span><br><span class="line">    <span class="built_in">this</span>.table = table;</span><br><span class="line">    <span class="built_in">this</span>.statement = statement;</span><br><span class="line">    <span class="built_in">this</span>.properties = properties;</span><br><span class="line">    <span class="built_in">this</span>.usesWithTotals = usesWithTotals;</span><br><span class="line">    <span class="built_in">this</span>.dateTimeTimeZone = timeZone;</span><br><span class="line">    <span class="built_in">this</span>.dateTimeZone = properties.isUseServerTimeZoneForDates()</span><br><span class="line">        ? timeZone</span><br><span class="line">        : TimeZone.getDefault(); <span class="comment">// FIXME should be the timezone defined in useTimeZone?</span></span><br><span class="line">    <span class="comment">// 这里用分隔符来获取列名</span></span><br><span class="line">    bis = <span class="keyword">new</span> <span class="title class_">StreamSplitter</span>(is, (<span class="type">byte</span>) <span class="number">0x0A</span>, bufferSize);  <span class="comment">///   \n</span></span><br><span class="line">    <span class="type">ByteFragment</span> <span class="variable">headerFragment</span> <span class="operator">=</span> bis.next();</span><br><span class="line">    <span class="keyword">if</span> (headerFragment == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果没有列名会抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;ClickHouse response without column names&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> headerFragment.asString(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 这里判断异常的方式，也挺简单粗暴的- -||</span></span><br><span class="line">    <span class="keyword">if</span> (header.startsWith(<span class="string">&quot;Code: &quot;</span>) &amp;&amp; !header.contains(<span class="string">&quot;\t&quot;</span>)) &#123;</span><br><span class="line">        is.close();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;ClickHouse error: &quot;</span> + header);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里获取列类型，获取不到也会抛出异常</span></span><br><span class="line">    String[] cols = toStringArray(headerFragment);</span><br><span class="line">    <span class="type">ByteFragment</span> <span class="variable">typesFragment</span> <span class="operator">=</span> bis.next();</span><br><span class="line">    <span class="keyword">if</span> (typesFragment == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;ClickHouse response without column types&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String[] types = toStringArray(typesFragment);</span><br><span class="line">    columns = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(cols.length);</span><br><span class="line">    <span class="type">TimeZone</span> <span class="variable">tz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="literal">null</span> &amp;&amp; statement.getConnection() <span class="keyword">instanceof</span> ClickHouseConnection) &#123;</span><br><span class="line">            tz = ((ClickHouseConnection)statement.getConnection()).getServerTimeZone();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        <span class="comment">// ignore the error</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tz == <span class="literal">null</span>) &#123;</span><br><span class="line">        tz = timeZone;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//最终将列信息加到private List&lt;ClickHouseColumnInfo&gt; columns;中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cols.length; i++) &#123;</span><br><span class="line">        columns.add(ClickHouseColumnInfo.parse(types[i], cols[i], tz));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

































]]></content>
  </entry>
</search>
